// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: core_proto.proto

#include "core_proto.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_core_5fproto_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_MsgHead_core_5fproto_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_core_5fproto_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ReqVote_core_5fproto_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_core_5fproto_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_RspVote_core_5fproto_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_core_5fproto_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_MsgBody_core_5fproto_2eproto;
namespace core {
class ReqVoteDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ReqVote> _instance;
} _ReqVote_default_instance_;
class RspVoteDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RspVote> _instance;
} _RspVote_default_instance_;
class MsgHeadDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MsgHead> _instance;
} _MsgHead_default_instance_;
class MsgBodyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MsgBody> _instance;
  const ::core::ReqVote* streqvote_;
  const ::core::RspVote* strspvote_;
} _MsgBody_default_instance_;
class MsgPKGDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MsgPKG> _instance;
} _MsgPKG_default_instance_;
}  // namespace core
static void InitDefaultsReqVote_core_5fproto_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::core::_ReqVote_default_instance_;
    new (ptr) ::core::ReqVote();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::core::ReqVote::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ReqVote_core_5fproto_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsReqVote_core_5fproto_2eproto}, {}};

static void InitDefaultsRspVote_core_5fproto_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::core::_RspVote_default_instance_;
    new (ptr) ::core::RspVote();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::core::RspVote::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_RspVote_core_5fproto_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsRspVote_core_5fproto_2eproto}, {}};

static void InitDefaultsMsgHead_core_5fproto_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::core::_MsgHead_default_instance_;
    new (ptr) ::core::MsgHead();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::core::MsgHead::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_MsgHead_core_5fproto_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsMsgHead_core_5fproto_2eproto}, {}};

static void InitDefaultsMsgBody_core_5fproto_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::core::_MsgBody_default_instance_;
    new (ptr) ::core::MsgBody();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::core::MsgBody::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_MsgBody_core_5fproto_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsMsgBody_core_5fproto_2eproto}, {
      &scc_info_ReqVote_core_5fproto_2eproto.base,
      &scc_info_RspVote_core_5fproto_2eproto.base,}};

static void InitDefaultsMsgPKG_core_5fproto_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::core::_MsgPKG_default_instance_;
    new (ptr) ::core::MsgPKG();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::core::MsgPKG::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_MsgPKG_core_5fproto_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsMsgPKG_core_5fproto_2eproto}, {
      &scc_info_MsgHead_core_5fproto_2eproto.base,
      &scc_info_MsgBody_core_5fproto_2eproto.base,}};

void InitDefaults_core_5fproto_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_ReqVote_core_5fproto_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RspVote_core_5fproto_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_MsgHead_core_5fproto_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_MsgBody_core_5fproto_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_MsgPKG_core_5fproto_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_core_5fproto_2eproto[5];
constexpr ::google::protobuf::EnumDescriptor const** file_level_enum_descriptors_core_5fproto_2eproto = nullptr;
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_core_5fproto_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_core_5fproto_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::core::ReqVote, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::core::ReqVote, term_),
  PROTOBUF_FIELD_OFFSET(::core::ReqVote, nodeid_),
  PROTOBUF_FIELD_OFFSET(::core::ReqVote, commitlogindex_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::core::RspVote, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::core::RspVote, result_),
  PROTOBUF_FIELD_OFFSET(::core::RspVote, term_),
  PROTOBUF_FIELD_OFFSET(::core::RspVote, nodeid_),
  PROTOBUF_FIELD_OFFSET(::core::RspVote, leaderid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::core::MsgHead, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::core::MsgHead, msgid_),
  PROTOBUF_FIELD_OFFSET(::core::MsgHead, srcaddr_),
  PROTOBUF_FIELD_OFFSET(::core::MsgHead, dstaddr_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::core::MsgBody, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::core::MsgBody, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::core::MsgBodyDefaultTypeInternal, streqvote_),
  offsetof(::core::MsgBodyDefaultTypeInternal, strspvote_),
  PROTOBUF_FIELD_OFFSET(::core::MsgBody, stBody_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::core::MsgPKG, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::core::MsgPKG, sthead_),
  PROTOBUF_FIELD_OFFSET(::core::MsgPKG, stbody_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::core::ReqVote)},
  { 8, -1, sizeof(::core::RspVote)},
  { 17, -1, sizeof(::core::MsgHead)},
  { 25, -1, sizeof(::core::MsgBody)},
  { 33, -1, sizeof(::core::MsgPKG)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::core::_ReqVote_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::core::_RspVote_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::core::_MsgHead_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::core::_MsgBody_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::core::_MsgPKG_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_core_5fproto_2eproto = {
  {}, AddDescriptors_core_5fproto_2eproto, "core_proto.proto", schemas,
  file_default_instances, TableStruct_core_5fproto_2eproto::offsets,
  file_level_metadata_core_5fproto_2eproto, 5, file_level_enum_descriptors_core_5fproto_2eproto, file_level_service_descriptors_core_5fproto_2eproto,
};

const char descriptor_table_protodef_core_5fproto_2eproto[] =
  "\n\020core_proto.proto\022\004core\"\?\n\007ReqVote\022\014\n\004T"
  "erm\030\001 \001(\r\022\016\n\006NodeId\030\002 \001(\r\022\026\n\016CommitLogIn"
  "dex\030\003 \001(\004\"I\n\007RspVote\022\016\n\006Result\030\001 \001(\021\022\014\n\004"
  "Term\030\002 \001(\r\022\016\n\006NodeId\030\003 \001(\r\022\020\n\010LeaderId\030\004"
  " \001(\r\":\n\007MsgHead\022\r\n\005MsgId\030\001 \001(\r\022\017\n\007SrcAdd"
  "r\030\002 \001(\r\022\017\n\007DstAddr\030\003 \001(\r\"[\n\007MsgBody\022\"\n\ts"
  "tReqVote\030\001 \001(\0132\r.core.ReqVoteH\000\022\"\n\tstRsp"
  "Vote\030\002 \001(\0132\r.core.RspVoteH\000B\010\n\006stBody\"F\n"
  "\006MsgPKG\022\035\n\006stHead\030\001 \001(\0132\r.core.MsgHead\022\035"
  "\n\006stBody\030\002 \001(\0132\r.core.MsgBodyb\006proto3"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_core_5fproto_2eproto = {
  false, InitDefaults_core_5fproto_2eproto, 
  descriptor_table_protodef_core_5fproto_2eproto,
  "core_proto.proto", &assign_descriptors_table_core_5fproto_2eproto, 397,
};

void AddDescriptors_core_5fproto_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[1] =
  {
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_core_5fproto_2eproto, deps, 0);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_core_5fproto_2eproto = []() { AddDescriptors_core_5fproto_2eproto(); return true; }();
namespace core {

// ===================================================================

void ReqVote::InitAsDefaultInstance() {
}
class ReqVote::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqVote::kTermFieldNumber;
const int ReqVote::kNodeIdFieldNumber;
const int ReqVote::kCommitLogIndexFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqVote::ReqVote()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:core.ReqVote)
}
ReqVote::ReqVote(const ReqVote& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&term_, &from.term_,
    static_cast<size_t>(reinterpret_cast<char*>(&commitlogindex_) -
    reinterpret_cast<char*>(&term_)) + sizeof(commitlogindex_));
  // @@protoc_insertion_point(copy_constructor:core.ReqVote)
}

void ReqVote::SharedCtor() {
  ::memset(&term_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&commitlogindex_) -
      reinterpret_cast<char*>(&term_)) + sizeof(commitlogindex_));
}

ReqVote::~ReqVote() {
  // @@protoc_insertion_point(destructor:core.ReqVote)
  SharedDtor();
}

void ReqVote::SharedDtor() {
}

void ReqVote::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReqVote& ReqVote::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ReqVote_core_5fproto_2eproto.base);
  return *internal_default_instance();
}


void ReqVote::Clear() {
// @@protoc_insertion_point(message_clear_start:core.ReqVote)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&term_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&commitlogindex_) -
      reinterpret_cast<char*>(&term_)) + sizeof(commitlogindex_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ReqVote::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ReqVote*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // uint32 Term = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_term(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // uint32 NodeId = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_nodeid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // uint64 CommitLogIndex = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_commitlogindex(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ReqVote::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:core.ReqVote)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 Term = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &term_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 NodeId = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nodeid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 CommitLogIndex = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &commitlogindex_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:core.ReqVote)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:core.ReqVote)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ReqVote::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:core.ReqVote)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 Term = 1;
  if (this->term() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->term(), output);
  }

  // uint32 NodeId = 2;
  if (this->nodeid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->nodeid(), output);
  }

  // uint64 CommitLogIndex = 3;
  if (this->commitlogindex() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->commitlogindex(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:core.ReqVote)
}

::google::protobuf::uint8* ReqVote::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:core.ReqVote)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 Term = 1;
  if (this->term() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->term(), target);
  }

  // uint32 NodeId = 2;
  if (this->nodeid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->nodeid(), target);
  }

  // uint64 CommitLogIndex = 3;
  if (this->commitlogindex() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->commitlogindex(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:core.ReqVote)
  return target;
}

size_t ReqVote::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:core.ReqVote)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 Term = 1;
  if (this->term() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->term());
  }

  // uint32 NodeId = 2;
  if (this->nodeid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->nodeid());
  }

  // uint64 CommitLogIndex = 3;
  if (this->commitlogindex() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->commitlogindex());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqVote::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:core.ReqVote)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqVote* source =
      ::google::protobuf::DynamicCastToGenerated<ReqVote>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:core.ReqVote)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:core.ReqVote)
    MergeFrom(*source);
  }
}

void ReqVote::MergeFrom(const ReqVote& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:core.ReqVote)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.term() != 0) {
    set_term(from.term());
  }
  if (from.nodeid() != 0) {
    set_nodeid(from.nodeid());
  }
  if (from.commitlogindex() != 0) {
    set_commitlogindex(from.commitlogindex());
  }
}

void ReqVote::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:core.ReqVote)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqVote::CopyFrom(const ReqVote& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:core.ReqVote)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqVote::IsInitialized() const {
  return true;
}

void ReqVote::Swap(ReqVote* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqVote::InternalSwap(ReqVote* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(term_, other->term_);
  swap(nodeid_, other->nodeid_);
  swap(commitlogindex_, other->commitlogindex_);
}

::google::protobuf::Metadata ReqVote::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_core_5fproto_2eproto);
  return ::file_level_metadata_core_5fproto_2eproto[kIndexInFileMessages];
}


// ===================================================================

void RspVote::InitAsDefaultInstance() {
}
class RspVote::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RspVote::kResultFieldNumber;
const int RspVote::kTermFieldNumber;
const int RspVote::kNodeIdFieldNumber;
const int RspVote::kLeaderIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RspVote::RspVote()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:core.RspVote)
}
RspVote::RspVote(const RspVote& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&result_, &from.result_,
    static_cast<size_t>(reinterpret_cast<char*>(&leaderid_) -
    reinterpret_cast<char*>(&result_)) + sizeof(leaderid_));
  // @@protoc_insertion_point(copy_constructor:core.RspVote)
}

void RspVote::SharedCtor() {
  ::memset(&result_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&leaderid_) -
      reinterpret_cast<char*>(&result_)) + sizeof(leaderid_));
}

RspVote::~RspVote() {
  // @@protoc_insertion_point(destructor:core.RspVote)
  SharedDtor();
}

void RspVote::SharedDtor() {
}

void RspVote::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RspVote& RspVote::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_RspVote_core_5fproto_2eproto.base);
  return *internal_default_instance();
}


void RspVote::Clear() {
// @@protoc_insertion_point(message_clear_start:core.RspVote)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&result_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&leaderid_) -
      reinterpret_cast<char*>(&result_)) + sizeof(leaderid_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RspVote::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<RspVote*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // sint32 Result = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_result(::google::protobuf::internal::ReadVarintZigZag32(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // uint32 Term = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_term(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // uint32 NodeId = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_nodeid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // uint32 LeaderId = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_leaderid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RspVote::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:core.RspVote)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // sint32 Result = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 Term = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &term_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 NodeId = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nodeid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 LeaderId = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &leaderid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:core.RspVote)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:core.RspVote)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RspVote::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:core.RspVote)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // sint32 Result = 1;
  if (this->result() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->result(), output);
  }

  // uint32 Term = 2;
  if (this->term() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->term(), output);
  }

  // uint32 NodeId = 3;
  if (this->nodeid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->nodeid(), output);
  }

  // uint32 LeaderId = 4;
  if (this->leaderid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->leaderid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:core.RspVote)
}

::google::protobuf::uint8* RspVote::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:core.RspVote)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // sint32 Result = 1;
  if (this->result() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->result(), target);
  }

  // uint32 Term = 2;
  if (this->term() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->term(), target);
  }

  // uint32 NodeId = 3;
  if (this->nodeid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->nodeid(), target);
  }

  // uint32 LeaderId = 4;
  if (this->leaderid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->leaderid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:core.RspVote)
  return target;
}

size_t RspVote::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:core.RspVote)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // sint32 Result = 1;
  if (this->result() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt32Size(
        this->result());
  }

  // uint32 Term = 2;
  if (this->term() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->term());
  }

  // uint32 NodeId = 3;
  if (this->nodeid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->nodeid());
  }

  // uint32 LeaderId = 4;
  if (this->leaderid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->leaderid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RspVote::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:core.RspVote)
  GOOGLE_DCHECK_NE(&from, this);
  const RspVote* source =
      ::google::protobuf::DynamicCastToGenerated<RspVote>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:core.RspVote)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:core.RspVote)
    MergeFrom(*source);
  }
}

void RspVote::MergeFrom(const RspVote& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:core.RspVote)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.result() != 0) {
    set_result(from.result());
  }
  if (from.term() != 0) {
    set_term(from.term());
  }
  if (from.nodeid() != 0) {
    set_nodeid(from.nodeid());
  }
  if (from.leaderid() != 0) {
    set_leaderid(from.leaderid());
  }
}

void RspVote::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:core.RspVote)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RspVote::CopyFrom(const RspVote& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:core.RspVote)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RspVote::IsInitialized() const {
  return true;
}

void RspVote::Swap(RspVote* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RspVote::InternalSwap(RspVote* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(result_, other->result_);
  swap(term_, other->term_);
  swap(nodeid_, other->nodeid_);
  swap(leaderid_, other->leaderid_);
}

::google::protobuf::Metadata RspVote::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_core_5fproto_2eproto);
  return ::file_level_metadata_core_5fproto_2eproto[kIndexInFileMessages];
}


// ===================================================================

void MsgHead::InitAsDefaultInstance() {
}
class MsgHead::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MsgHead::kMsgIdFieldNumber;
const int MsgHead::kSrcAddrFieldNumber;
const int MsgHead::kDstAddrFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MsgHead::MsgHead()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:core.MsgHead)
}
MsgHead::MsgHead(const MsgHead& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&msgid_, &from.msgid_,
    static_cast<size_t>(reinterpret_cast<char*>(&dstaddr_) -
    reinterpret_cast<char*>(&msgid_)) + sizeof(dstaddr_));
  // @@protoc_insertion_point(copy_constructor:core.MsgHead)
}

void MsgHead::SharedCtor() {
  ::memset(&msgid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dstaddr_) -
      reinterpret_cast<char*>(&msgid_)) + sizeof(dstaddr_));
}

MsgHead::~MsgHead() {
  // @@protoc_insertion_point(destructor:core.MsgHead)
  SharedDtor();
}

void MsgHead::SharedDtor() {
}

void MsgHead::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MsgHead& MsgHead::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_MsgHead_core_5fproto_2eproto.base);
  return *internal_default_instance();
}


void MsgHead::Clear() {
// @@protoc_insertion_point(message_clear_start:core.MsgHead)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&msgid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dstaddr_) -
      reinterpret_cast<char*>(&msgid_)) + sizeof(dstaddr_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MsgHead::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<MsgHead*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // uint32 MsgId = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_msgid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // uint32 SrcAddr = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_srcaddr(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // uint32 DstAddr = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_dstaddr(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MsgHead::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:core.MsgHead)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 MsgId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &msgid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 SrcAddr = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &srcaddr_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 DstAddr = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dstaddr_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:core.MsgHead)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:core.MsgHead)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MsgHead::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:core.MsgHead)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 MsgId = 1;
  if (this->msgid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->msgid(), output);
  }

  // uint32 SrcAddr = 2;
  if (this->srcaddr() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->srcaddr(), output);
  }

  // uint32 DstAddr = 3;
  if (this->dstaddr() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->dstaddr(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:core.MsgHead)
}

::google::protobuf::uint8* MsgHead::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:core.MsgHead)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 MsgId = 1;
  if (this->msgid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->msgid(), target);
  }

  // uint32 SrcAddr = 2;
  if (this->srcaddr() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->srcaddr(), target);
  }

  // uint32 DstAddr = 3;
  if (this->dstaddr() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->dstaddr(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:core.MsgHead)
  return target;
}

size_t MsgHead::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:core.MsgHead)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 MsgId = 1;
  if (this->msgid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->msgid());
  }

  // uint32 SrcAddr = 2;
  if (this->srcaddr() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->srcaddr());
  }

  // uint32 DstAddr = 3;
  if (this->dstaddr() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->dstaddr());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MsgHead::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:core.MsgHead)
  GOOGLE_DCHECK_NE(&from, this);
  const MsgHead* source =
      ::google::protobuf::DynamicCastToGenerated<MsgHead>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:core.MsgHead)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:core.MsgHead)
    MergeFrom(*source);
  }
}

void MsgHead::MergeFrom(const MsgHead& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:core.MsgHead)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.msgid() != 0) {
    set_msgid(from.msgid());
  }
  if (from.srcaddr() != 0) {
    set_srcaddr(from.srcaddr());
  }
  if (from.dstaddr() != 0) {
    set_dstaddr(from.dstaddr());
  }
}

void MsgHead::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:core.MsgHead)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgHead::CopyFrom(const MsgHead& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:core.MsgHead)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgHead::IsInitialized() const {
  return true;
}

void MsgHead::Swap(MsgHead* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MsgHead::InternalSwap(MsgHead* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(msgid_, other->msgid_);
  swap(srcaddr_, other->srcaddr_);
  swap(dstaddr_, other->dstaddr_);
}

::google::protobuf::Metadata MsgHead::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_core_5fproto_2eproto);
  return ::file_level_metadata_core_5fproto_2eproto[kIndexInFileMessages];
}


// ===================================================================

void MsgBody::InitAsDefaultInstance() {
  ::core::_MsgBody_default_instance_.streqvote_ = const_cast< ::core::ReqVote*>(
      ::core::ReqVote::internal_default_instance());
  ::core::_MsgBody_default_instance_.strspvote_ = const_cast< ::core::RspVote*>(
      ::core::RspVote::internal_default_instance());
}
class MsgBody::HasBitSetters {
 public:
  static const ::core::ReqVote& streqvote(const MsgBody* msg);
  static const ::core::RspVote& strspvote(const MsgBody* msg);
};

const ::core::ReqVote&
MsgBody::HasBitSetters::streqvote(const MsgBody* msg) {
  return *msg->stBody_.streqvote_;
}
const ::core::RspVote&
MsgBody::HasBitSetters::strspvote(const MsgBody* msg) {
  return *msg->stBody_.strspvote_;
}
void MsgBody::set_allocated_streqvote(::core::ReqVote* streqvote) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_stBody();
  if (streqvote) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      streqvote = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, streqvote, submessage_arena);
    }
    set_has_streqvote();
    stBody_.streqvote_ = streqvote;
  }
  // @@protoc_insertion_point(field_set_allocated:core.MsgBody.stReqVote)
}
void MsgBody::set_allocated_strspvote(::core::RspVote* strspvote) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_stBody();
  if (strspvote) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      strspvote = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, strspvote, submessage_arena);
    }
    set_has_strspvote();
    stBody_.strspvote_ = strspvote;
  }
  // @@protoc_insertion_point(field_set_allocated:core.MsgBody.stRspVote)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MsgBody::kStReqVoteFieldNumber;
const int MsgBody::kStRspVoteFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MsgBody::MsgBody()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:core.MsgBody)
}
MsgBody::MsgBody(const MsgBody& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_stBody();
  switch (from.stBody_case()) {
    case kStReqVote: {
      mutable_streqvote()->::core::ReqVote::MergeFrom(from.streqvote());
      break;
    }
    case kStRspVote: {
      mutable_strspvote()->::core::RspVote::MergeFrom(from.strspvote());
      break;
    }
    case STBODY_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:core.MsgBody)
}

void MsgBody::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_MsgBody_core_5fproto_2eproto.base);
  clear_has_stBody();
}

MsgBody::~MsgBody() {
  // @@protoc_insertion_point(destructor:core.MsgBody)
  SharedDtor();
}

void MsgBody::SharedDtor() {
  if (has_stBody()) {
    clear_stBody();
  }
}

void MsgBody::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MsgBody& MsgBody::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_MsgBody_core_5fproto_2eproto.base);
  return *internal_default_instance();
}


void MsgBody::clear_stBody() {
// @@protoc_insertion_point(one_of_clear_start:core.MsgBody)
  switch (stBody_case()) {
    case kStReqVote: {
      delete stBody_.streqvote_;
      break;
    }
    case kStRspVote: {
      delete stBody_.strspvote_;
      break;
    }
    case STBODY_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = STBODY_NOT_SET;
}


void MsgBody::Clear() {
// @@protoc_insertion_point(message_clear_start:core.MsgBody)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_stBody();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MsgBody::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<MsgBody*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .core.ReqVote stReqVote = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::core::ReqVote::_InternalParse;
        object = msg->mutable_streqvote();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .core.RspVote stRspVote = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::core::RspVote::_InternalParse;
        object = msg->mutable_strspvote();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MsgBody::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:core.MsgBody)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .core.ReqVote stReqVote = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_streqvote()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .core.RspVote stRspVote = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_strspvote()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:core.MsgBody)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:core.MsgBody)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MsgBody::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:core.MsgBody)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .core.ReqVote stReqVote = 1;
  if (has_streqvote()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::streqvote(this), output);
  }

  // .core.RspVote stRspVote = 2;
  if (has_strspvote()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::strspvote(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:core.MsgBody)
}

::google::protobuf::uint8* MsgBody::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:core.MsgBody)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .core.ReqVote stReqVote = 1;
  if (has_streqvote()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::streqvote(this), target);
  }

  // .core.RspVote stRspVote = 2;
  if (has_strspvote()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::strspvote(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:core.MsgBody)
  return target;
}

size_t MsgBody::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:core.MsgBody)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (stBody_case()) {
    // .core.ReqVote stReqVote = 1;
    case kStReqVote: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *stBody_.streqvote_);
      break;
    }
    // .core.RspVote stRspVote = 2;
    case kStRspVote: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *stBody_.strspvote_);
      break;
    }
    case STBODY_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MsgBody::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:core.MsgBody)
  GOOGLE_DCHECK_NE(&from, this);
  const MsgBody* source =
      ::google::protobuf::DynamicCastToGenerated<MsgBody>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:core.MsgBody)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:core.MsgBody)
    MergeFrom(*source);
  }
}

void MsgBody::MergeFrom(const MsgBody& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:core.MsgBody)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.stBody_case()) {
    case kStReqVote: {
      mutable_streqvote()->::core::ReqVote::MergeFrom(from.streqvote());
      break;
    }
    case kStRspVote: {
      mutable_strspvote()->::core::RspVote::MergeFrom(from.strspvote());
      break;
    }
    case STBODY_NOT_SET: {
      break;
    }
  }
}

void MsgBody::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:core.MsgBody)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgBody::CopyFrom(const MsgBody& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:core.MsgBody)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgBody::IsInitialized() const {
  return true;
}

void MsgBody::Swap(MsgBody* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MsgBody::InternalSwap(MsgBody* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(stBody_, other->stBody_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::google::protobuf::Metadata MsgBody::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_core_5fproto_2eproto);
  return ::file_level_metadata_core_5fproto_2eproto[kIndexInFileMessages];
}


// ===================================================================

void MsgPKG::InitAsDefaultInstance() {
  ::core::_MsgPKG_default_instance_._instance.get_mutable()->sthead_ = const_cast< ::core::MsgHead*>(
      ::core::MsgHead::internal_default_instance());
  ::core::_MsgPKG_default_instance_._instance.get_mutable()->stbody_ = const_cast< ::core::MsgBody*>(
      ::core::MsgBody::internal_default_instance());
}
class MsgPKG::HasBitSetters {
 public:
  static const ::core::MsgHead& sthead(const MsgPKG* msg);
  static const ::core::MsgBody& stbody(const MsgPKG* msg);
};

const ::core::MsgHead&
MsgPKG::HasBitSetters::sthead(const MsgPKG* msg) {
  return *msg->sthead_;
}
const ::core::MsgBody&
MsgPKG::HasBitSetters::stbody(const MsgPKG* msg) {
  return *msg->stbody_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MsgPKG::kStHeadFieldNumber;
const int MsgPKG::kStBodyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MsgPKG::MsgPKG()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:core.MsgPKG)
}
MsgPKG::MsgPKG(const MsgPKG& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_sthead()) {
    sthead_ = new ::core::MsgHead(*from.sthead_);
  } else {
    sthead_ = nullptr;
  }
  if (from.has_stbody()) {
    stbody_ = new ::core::MsgBody(*from.stbody_);
  } else {
    stbody_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:core.MsgPKG)
}

void MsgPKG::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_MsgPKG_core_5fproto_2eproto.base);
  ::memset(&sthead_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&stbody_) -
      reinterpret_cast<char*>(&sthead_)) + sizeof(stbody_));
}

MsgPKG::~MsgPKG() {
  // @@protoc_insertion_point(destructor:core.MsgPKG)
  SharedDtor();
}

void MsgPKG::SharedDtor() {
  if (this != internal_default_instance()) delete sthead_;
  if (this != internal_default_instance()) delete stbody_;
}

void MsgPKG::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MsgPKG& MsgPKG::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_MsgPKG_core_5fproto_2eproto.base);
  return *internal_default_instance();
}


void MsgPKG::Clear() {
// @@protoc_insertion_point(message_clear_start:core.MsgPKG)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && sthead_ != nullptr) {
    delete sthead_;
  }
  sthead_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && stbody_ != nullptr) {
    delete stbody_;
  }
  stbody_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MsgPKG::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<MsgPKG*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .core.MsgHead stHead = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::core::MsgHead::_InternalParse;
        object = msg->mutable_sthead();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .core.MsgBody stBody = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::core::MsgBody::_InternalParse;
        object = msg->mutable_stbody();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MsgPKG::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:core.MsgPKG)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .core.MsgHead stHead = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_sthead()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .core.MsgBody stBody = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_stbody()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:core.MsgPKG)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:core.MsgPKG)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MsgPKG::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:core.MsgPKG)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .core.MsgHead stHead = 1;
  if (this->has_sthead()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::sthead(this), output);
  }

  // .core.MsgBody stBody = 2;
  if (this->has_stbody()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::stbody(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:core.MsgPKG)
}

::google::protobuf::uint8* MsgPKG::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:core.MsgPKG)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .core.MsgHead stHead = 1;
  if (this->has_sthead()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::sthead(this), target);
  }

  // .core.MsgBody stBody = 2;
  if (this->has_stbody()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::stbody(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:core.MsgPKG)
  return target;
}

size_t MsgPKG::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:core.MsgPKG)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .core.MsgHead stHead = 1;
  if (this->has_sthead()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *sthead_);
  }

  // .core.MsgBody stBody = 2;
  if (this->has_stbody()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *stbody_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MsgPKG::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:core.MsgPKG)
  GOOGLE_DCHECK_NE(&from, this);
  const MsgPKG* source =
      ::google::protobuf::DynamicCastToGenerated<MsgPKG>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:core.MsgPKG)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:core.MsgPKG)
    MergeFrom(*source);
  }
}

void MsgPKG::MergeFrom(const MsgPKG& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:core.MsgPKG)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_sthead()) {
    mutable_sthead()->::core::MsgHead::MergeFrom(from.sthead());
  }
  if (from.has_stbody()) {
    mutable_stbody()->::core::MsgBody::MergeFrom(from.stbody());
  }
}

void MsgPKG::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:core.MsgPKG)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgPKG::CopyFrom(const MsgPKG& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:core.MsgPKG)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgPKG::IsInitialized() const {
  return true;
}

void MsgPKG::Swap(MsgPKG* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MsgPKG::InternalSwap(MsgPKG* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(sthead_, other->sthead_);
  swap(stbody_, other->stbody_);
}

::google::protobuf::Metadata MsgPKG::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_core_5fproto_2eproto);
  return ::file_level_metadata_core_5fproto_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace core
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::core::ReqVote* Arena::CreateMaybeMessage< ::core::ReqVote >(Arena* arena) {
  return Arena::CreateInternal< ::core::ReqVote >(arena);
}
template<> PROTOBUF_NOINLINE ::core::RspVote* Arena::CreateMaybeMessage< ::core::RspVote >(Arena* arena) {
  return Arena::CreateInternal< ::core::RspVote >(arena);
}
template<> PROTOBUF_NOINLINE ::core::MsgHead* Arena::CreateMaybeMessage< ::core::MsgHead >(Arena* arena) {
  return Arena::CreateInternal< ::core::MsgHead >(arena);
}
template<> PROTOBUF_NOINLINE ::core::MsgBody* Arena::CreateMaybeMessage< ::core::MsgBody >(Arena* arena) {
  return Arena::CreateInternal< ::core::MsgBody >(arena);
}
template<> PROTOBUF_NOINLINE ::core::MsgPKG* Arena::CreateMaybeMessage< ::core::MsgPKG >(Arena* arena) {
  return Arena::CreateInternal< ::core::MsgPKG >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
